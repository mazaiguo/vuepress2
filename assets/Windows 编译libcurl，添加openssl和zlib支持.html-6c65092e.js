import{_ as l,r as i,o,c,a as n,b as s,d as a,e as t}from"./app-a242af93.js";const p={},r=n("h1",{id:"windows-编译libcurl-添加openssl和zlib支持",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#windows-编译libcurl-添加openssl和zlib支持","aria-hidden":"true"},"#"),s(" Windows 编译libcurl，添加openssl和zlib支持")],-1),d=n("h2",{id:"编译zlib",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#编译zlib","aria-hidden":"true"},"#"),s(" 编译zlib")],-1),u={href:"https://zlib.net/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://zlib.net/zlib1213.zip",target:"_blank",rel:"noopener noreferrer"},_=t('<h3 id="编译win32" tabindex="-1"><a class="header-anchor" href="#编译win32" aria-hidden="true">#</a> 编译win32</h3><h4 id="使用cmake编译程序" tabindex="-1"><a class="header-anchor" href="#使用cmake编译程序" aria-hidden="true">#</a> 使用CMake编译程序</h4><figure><img src="https://raw.githubusercontent.com/mazaiguo/blogimg/main/20230712220029.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="选中zlibstatic项目-构建zlib的静态库。-win32-release" tabindex="-1"><a class="header-anchor" href="#选中zlibstatic项目-构建zlib的静态库。-win32-release" aria-hidden="true">#</a> 选中zlibstatic项目，构建zlib的静态库。（win32 release）</h4><p>在E:\\Gitee\\Tool\\zlib-1.2.13\\build\\Release下生成了<code>zlibstaticd.lib</code>文件，修改名为<code>zlib.lib</code>。</p><p>将<code>zlib.h</code>、<code>zconf.h</code>文件复制到<code>E:\\Gitee\\Tool\\include</code>目录下</p><h3 id="编译x64" tabindex="-1"><a class="header-anchor" href="#编译x64" aria-hidden="true">#</a> 编译x64</h3><p>E:\\Gitee\\Tool\\include\\zlib<br> ├─x64<br> │ ├─include<br> │ │ zconf.h<br> │ │ zlib.h<br> │ └─lib<br> │ zlib.lib<br> └─x86<br> ├─include<br> │ zconf.h<br> │ zlib.h<br> └─lib<br> zlib.lib</p><h2 id="编译openssl" tabindex="-1"><a class="header-anchor" href="#编译openssl" aria-hidden="true">#</a> 编译openssl</h2>',9),m={href:"https://platform.activestate.com/JerryMa/ActivePerl-5.28?cli-instructions=windows",target:"_blank",rel:"noopener noreferrer"},k={href:"https://strawberryperl.com/releases.html",target:"_blank",rel:"noopener noreferrer"},v={href:"http://dl.softmgr.qq.com/original/Development/ActivePerl-5.16.3.1604-MSWin32-x64-298023.msi",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/openssl/openssl.git",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,"一份给x86用，一份给x64用，两份代码目录不同，不然编译的时候会冲突",-1),g=t(`<p>编译步骤：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>.安装ActivePerl-5.16.3.1604-MSWin32-x64-298023.msi
<span class="token number">2</span>.下载openssl  https://www.openssl.org/source/，解压，如：E:<span class="token punctuation">\\</span>GDAL<span class="token punctuation">\\</span>openssl
<span class="token number">3</span>.打开Developer Command Prompt <span class="token keyword">for</span> VS2015命令行工具，cd进入E:<span class="token punctuation">\\</span>GDAL<span class="token punctuation">\\</span>openssl
<span class="token number">4</span>.perl Configure VC-WIN64A no-asm no-shared <span class="token parameter variable">--prefix</span><span class="token operator">=</span>E:<span class="token punctuation">\\</span>GDAL<span class="token punctuation">\\</span>dev           
（可选项：VC-WIN32 <span class="token operator">|</span> VC-WIN64A <span class="token operator">|</span> VC-WIN64I <span class="token operator">|</span> VC-CE，--prefix是最终拷贝的目录；添加no-shared参数可生成静态库）
（VC-WIN32生成32位的，VC-WIN64A生成64位）
<span class="token number">5</span>.nmake 
<span class="token number">6</span>.nmake <span class="token builtin class-name">test</span> <span class="token comment">#很慢，可选</span>
<span class="token number">7</span>.nmake <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打开x86-native-tools-command-prompt-for-vs-2017工具-切换到openssl源码目录" tabindex="-1"><a class="header-anchor" href="#打开x86-native-tools-command-prompt-for-vs-2017工具-切换到openssl源码目录" aria-hidden="true">#</a> 打开<code>x86 Native Tools Command Prompt for VS 2017</code>工具，切换到openssl源码目录</h3><ul><li><code>perl Configure VC-WIN64A --release no-asm no-shared --prefix=&quot;E:\\Gitee\\Tool\\include\\openssl\\x86&quot;</code></li><li>nmake</li><li>nmake install</li><li>新建安装目录<code>E:\\Gitee\\Tool\\include\\openssl\\x86</code>。</li></ul><figure><img src="https://raw.githubusercontent.com/mazaiguo/blogimg/main/20230712225249.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="打开x64-native-tools-command-prompt-for-vs-2017工具-切换到openssl源码目录" tabindex="-1"><a class="header-anchor" href="#打开x64-native-tools-command-prompt-for-vs-2017工具-切换到openssl源码目录" aria-hidden="true">#</a> 打开<code>x64 Native Tools Command Prompt for VS 2017</code>工具，切换到openssl源码目录</h3><ul><li>新建安装目录<code>E:\\Gitee\\Tool\\include\\openssl\\x64</code>。</li><li><code>perl Configure VC-WIN64A --release no-asm no-shared --prefix=&quot;E:\\Gitee\\Tool\\include\\openssl\\x64&quot;</code></li><li>nmake</li><li>nmake install</li><li>与X86操作类似，不再演示</li></ul><h2 id="编译libcurl" tabindex="-1"><a class="header-anchor" href="#编译libcurl" aria-hidden="true">#</a> 编译libcurl</h2><h3 id="编译32位" tabindex="-1"><a class="header-anchor" href="#编译32位" aria-hidden="true">#</a> 编译32位</h3><p>打开<code>x86 Native Tools Command Prompt for VS 2017</code>工具，切换到<code>E:\\Gitee\\Tool\\curl\\winbuild</code>目录。</p><p><mark>问题</mark></p><p><code>NMAKE : fatal error U1073: 不知道如何生成“..\\src\\tool_hugehelp.c” </code></p><p>回退到目录:<code>E:\\Gitee\\Tool\\curl</code>，运行buildconf.bat</p><figure><img src="https://raw.githubusercontent.com/mazaiguo/blogimg/main/20230713091745.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nmake /f Makefile.vc mode=static VC=15 MACHINE=x86 DEBUG=no WITH_SSL=static WITH_ZLIB=static WITH_PREFIX=E:\\Gitee\\Tool\\include\\curl\\x86\\ SSL_PATH=E:\\Gitee\\Tool\\include\\openssl\\x86\\ ZLIB_PATH=E:\\Gitee\\Tool\\include\\zlib\\x86\\
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项说明：</p><ul><li><code>mode=&lt;static/dll&gt;</code>：编译静态/动态库</li><li><code>VC=&lt;10/11/12/14/15/16&gt;</code>：VisualStudio版本</li><li><code>MACHINE=&lt;x86/x64&gt;</code>：生成32/64位库</li><li><code>DEBUG=&lt;yes/no&gt;</code>：生成debug/release版本</li><li><code>WITH_SSL=&lt;static/dll&gt;</code>：openssl的库类型</li><li><code>WITH_ZLIB=&lt;static/dll&gt;</code>：zlib的库类型</li><li><code>WITH_PREFIX=&lt;path&gt;</code>：编译结果输出路径。必须以反斜杠\\结尾</li><li><code>SSL_PATH=&lt;path&gt;</code>：openssl路径</li><li><code>ZLIB_PATH=&lt;path&gt;</code>：zlib路径</li></ul><table><thead><tr><th>VC版本</th><th>_MSC_VER宏的值</th><th>VS版本</th><th>MSVC toolset version</th></tr></thead><tbody><tr><td>VC6.0</td><td>1200</td><td>VS 6.0</td><td></td></tr><tr><td>VC7.0</td><td>1300</td><td>VS2002</td><td></td></tr><tr><td>VC7.1</td><td>1310</td><td>VS2003</td><td></td></tr><tr><td>VC8.0</td><td>1400</td><td>VS2005</td><td>80</td></tr><tr><td>VC9.0</td><td>1500</td><td>VS2008</td><td>90</td></tr><tr><td>VC10.0</td><td>1600</td><td>VS2010</td><td>100</td></tr><tr><td>VC11.0</td><td>1700</td><td>VS2012</td><td>110</td></tr><tr><td>VC12.0</td><td>1800</td><td>VS2013</td><td>120</td></tr><tr><td>VC14.0</td><td>1900</td><td>VS2015</td><td>140</td></tr><tr><td>VC15.0</td><td>[ 1910 , 1916 ]</td><td>VS2017</td><td>141</td></tr><tr><td>VC16.0</td><td>[ 1920 , 1929 ] [][1920,1929]</td><td>VS2019</td><td>142</td></tr><tr><td>VC17.0</td><td>[1930,)</td><td>VS2022</td><td>143</td></tr></tbody></table><h3 id="编译64" tabindex="-1"><a class="header-anchor" href="#编译64" aria-hidden="true">#</a> 编译64</h3><p>打开<code>x64 Native Tools Command Prompt for VS 2017</code>工具，切换到<code>E:\\Gitee\\Tool\\curl\\winbuild</code>目录。</p><p><mark>问题</mark></p><p><code>NMAKE : fatal error U1073: 不知道如何生成“..\\src\\tool_hugehelp.c” </code></p><p>回退到目录:<code>E:\\Gitee\\Tool\\curl</code></p><figure><img src="https://raw.githubusercontent.com/mazaiguo/blogimg/main/20230713091745.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nmake /f Makefile.vc mode=static VC=15 MACHINE=x64 DEBUG=no WITH_SSL=static WITH_ZLIB=static WITH_PREFIX=E:\\Gitee\\Tool\\include\\curl\\x64\\ SSL_PATH=E:\\Gitee\\Tool\\include\\openssl\\x64\\ ZLIB_PATH=E:\\Gitee\\Tool\\include\\zlib\\x64\\
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="合并多个库" tabindex="-1"><a class="header-anchor" href="#合并多个库" aria-hidden="true">#</a> 合并多个库</h2>`,26),x={href:"https://github.com/curl/curl.git",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"libcurl.lib",-1),z=n("code",null,"zlib.lib",-1),L=n("code",null,"libssl.lib",-1),T=n("code",null,"libcrypto.lib",-1),w=t(`<p>可以将这4个库文件合并为1个<code>libcurl.lib</code>。</p><h3 id="编译32位-1" tabindex="-1"><a class="header-anchor" href="#编译32位-1" aria-hidden="true">#</a> 编译32位</h3><p>新建文件夹<code>E:\\Gitee\\Tool\\include\\curl\\x86\\lib_merge</code>。</p><p>打开x86 Native Tools Command Prompt for VS 2017工具，切换到<code>E:\\Gitee\\Tool\\include\\curl\\x86\\lib_merge</code>目录。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lib.exe E:\\Gitee\\Tool\\include\\curl\\x86\\lib\\libcurl_a.lib E:\\Gitee\\Tool\\include\\openssl\\x86\\lib\\libcrypto.lib E:\\Gitee\\Tool\\include\\openssl\\x86\\lib\\libssl.lib E:\\Gitee\\Tool\\include\\zlib\\x86\\lib\\zlib.lib   /out:E:\\Gitee\\Tool\\include\\curl\\x86\\lib_merge\\libcurl.lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="编译64位" tabindex="-1"><a class="header-anchor" href="#编译64位" aria-hidden="true">#</a> 编译64位</h3><p>新建文件夹<code>E:\\Gitee\\Tool\\include\\curl\\x64\\lib_merge</code>。</p><p>打开<code>x64 Native Tools Command Prompt for VS 2017</code>工具，切换到<code>E:\\Gitee\\Tool\\include\\curl\\x64\\lib_merge</code>目录。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lib.exe E:\\Gitee\\Tool\\include\\curl\\x64\\lib\\libcurl_a.lib E:\\Gitee\\Tool\\include\\openssl\\x64\\lib\\libcrypto.lib E:\\Gitee\\Tool\\include\\openssl\\x64\\lib\\libssl.lib E:\\Gitee\\Tool\\include\\zlib\\x64\\lib\\zlib.lib   /out:E:\\Gitee\\Tool\\include\\curl\\x64\\lib_merge\\libcurl.lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;curl/curl.h&gt;</span></span>


<span class="token keyword">struct</span> <span class="token class-name">memory</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> response<span class="token punctuation">;</span>
    size_t size<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> size_t <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> size_t size<span class="token punctuation">,</span> size_t nmemb<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>userp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    size_t realsize <span class="token operator">=</span> size <span class="token operator">*</span> nmemb<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">memory</span> <span class="token operator">*</span>mem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">memory</span> <span class="token operator">*</span><span class="token punctuation">)</span>userp<span class="token punctuation">;</span>

    <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>mem<span class="token operator">-&gt;</span>response<span class="token punctuation">,</span> mem<span class="token operator">-&gt;</span>size <span class="token operator">+</span> realsize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">/* out of memory! */</span>
    <span class="token punctuation">}</span>

    mem<span class="token operator">-&gt;</span>response <span class="token operator">=</span> ptr<span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mem<span class="token operator">-&gt;</span>response<span class="token punctuation">[</span>mem<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> realsize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mem<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> realsize<span class="token punctuation">;</span>
    mem<span class="token operator">-&gt;</span>response<span class="token punctuation">[</span>mem<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> realsize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 1. 初始化 */</span>
    CURL<span class="token operator">*</span> curl <span class="token operator">=</span> <span class="token function">curl_easy_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>curl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;curl_easy_init failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">struct</span> <span class="token class-name">memory</span> chunk <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    chunk<span class="token punctuation">.</span>response <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    chunk<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">/* 2. 发送请求 */</span>
    <span class="token function">curl_easy_setopt</span><span class="token punctuation">(</span>curl<span class="token punctuation">,</span> CURLOPT_URL<span class="token punctuation">,</span> <span class="token string">&quot;https://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">curl_easy_setopt</span><span class="token punctuation">(</span>curl<span class="token punctuation">,</span> CURLOPT_WRITEFUNCTION<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">curl_easy_setopt</span><span class="token punctuation">(</span>curl<span class="token punctuation">,</span> CURLOPT_WRITEDATA<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">curl_easy_setopt</span><span class="token punctuation">(</span>curl<span class="token punctuation">,</span> CURLOPT_SSL_VERIFYHOST<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">curl_easy_setopt</span><span class="token punctuation">(</span>curl<span class="token punctuation">,</span> CURLOPT_SSL_VERIFYPEER<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">curl_easy_setopt</span><span class="token punctuation">(</span>curl<span class="token punctuation">,</span> CURLOPT_SSL_VERIFYSTATUS<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">curl_easy_perform</span><span class="token punctuation">(</span>curl<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 3. 查看请求返回结果 */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> chunk<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 4. 清理 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        chunk<span class="token punctuation">.</span>response <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        chunk<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">curl_easy_cleanup</span><span class="token punctuation">(</span>curl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    curl <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加如下lib</p>`,12),C=n("li",null,"ws2_32.lib",-1),N=n("li",null,"wldap32.lib",-1),E=n("li",null,"crypt32.lib",-1),V=n("li",null,"Normaliz.lib",-1),S=n("li",null,"–",-1),I=n("li",null,"libcurl.lib （如果已经合并，就不需要下面3个了）",-1),G=n("li",null,"libcrypto.lib",-1),P=n("li",null,"libssl.lib",-1),A=n("br",null,null,-1),K=n("br",null,null,-1),W=n("br",null,null,-1),U=n("br",null,null,-1),R={href:"https://blog.csdn.net/weixin_41701847/article/details/131300414",target:"_blank",rel:"noopener noreferrer"},H=t(`<h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><h3 id="问题一" tabindex="-1"><a class="header-anchor" href="#问题一" aria-hidden="true">#</a> 问题一</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>error LNK2001: 无法解析的外部符号 __imp__curl_easy_setopt
error LNK2001: 无法解析的外部符号 __imp__curl_easy_init
error LNK2001: 无法解析的外部符号 __imp__curl_easy_cleanup
error LNK2001: 无法解析的外部符号 __imp__curl_slist_append
error LNK2001: 无法解析的外部符号 __imp__curl_slist_free_all
error LNK2001: 无法解析的外部符号 __imp__curl_easy_strerror
error LNK2001: 无法解析的外部符号 __imp__curl_easy_perform
error LNK2001: 无法解析的外部符号 __imp__curl_easy_getinfo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过在测试程序的“CPP ---&gt; 预处理”中增加 BUILDING_LIBCURL（或者CURL_STATICLIB），问题得以解决。</li></ul><h3 id="问题二" tabindex="-1"><a class="header-anchor" href="#问题二" aria-hidden="true">#</a> 问题二</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_init referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_unbind_s referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_set_option referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_simple_bind_s referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_search_s referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_msgfree referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_err2string referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_first_entry referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_next_entry referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_first_attribute referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_next_attribute referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_get_values_len referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_value_free_len referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_get_dn referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ldap_memfree referenced in function __ldap_free_urldesc
1&gt;libcurl.lib(ldap.obj) : error LNK2019: unresolved external symbol __imp__ber_free referenced in function __ldap_free_urldesc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要添加Ws2_32.lib和Wldap32.lib。</p><h3 id="问题3" tabindex="-1"><a class="header-anchor" href="#问题3" aria-hidden="true">#</a> 问题3</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>error LNK2019: 无法解析的外部符号 __imp__IdnToAscii
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要添加Normaliz.lib</p><h3 id="问题4" tabindex="-1"><a class="header-anchor" href="#问题4" aria-hidden="true">#</a> 问题4</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>无法解析的外部符号 __imp_CertOpenStore解决方案
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 项目属性 - 链接器 - 输入 - 附加依赖项 中加入： Crypt32.lib</p>`,13),B={href:"https://blog.csdn.net/weixin_41701847/article/details/131300414",target:"_blank",rel:"noopener noreferrer"},j={href:"https://developers.refinitiv.com/en/article-catalog/article/how-to-build-openssl--zlib--and-curl-libraries-on-windows",target:"_blank",rel:"noopener noreferrer"};function M(q,D){const e=i("ExternalLinkIcon");return o(),c("div",null,[r,d,n("p",null,[n("a",u,[s("https://zlib.net/"),a(e)])]),n("p",null,[n("a",b,[s("下载地址"),a(e)])]),_,n("ul",null,[n("li",null,[n("a",m,[s("perl下载地址"),a(e)])]),n("li",null,[n("a",k,[s("下载strawberry perl"),a(e)]),s("，可以选择ZIP edition版，解压即可用，免安装。")]),n("li",null,[n("strong",null,[n("a",v,[s("下载5.16.3,这版本有完整的信息，不需要从网上再下，国内下载太慢了"),a(e)])])]),n("li",null,[s("下载"),n("a",h,[s("openssl源码"),a(e)])]),f]),g,n("p",null,[s("代码中使用"),n("a",x,[s("libcurl"),a(e)]),s("库，编译的时候，需要同时链接"),y,s("，"),z,s("，"),L,s("，"),T,s("4个库。")]),w,n("ul",null,[C,N,E,V,S,I,G,P,n("li",null,[s("zlib.lib"),A,s(" 编译运行程序，输出百度首页的html说明测试通过。"),K,s(" ————————————————"),W,s(" 版权声明：本文为CSDN博主「Leopard-C」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),U,s(" 原文链接："),n("a",R,[s("https://blog.csdn.net/weixin_41701847/article/details/131300414"),a(e)])])]),H,n("p",null,[n("a",B,[s("参考"),a(e)])]),n("p",null,[n("a",j,[s("How to Build OpenSSL, zlib, and cURL libraries on Windows"),a(e)])])])}const F=l(p,[["render",M],["__file","Windows 编译libcurl，添加openssl和zlib支持.html.vue"]]);export{F as default};
