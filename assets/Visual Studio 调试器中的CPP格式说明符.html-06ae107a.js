import{_ as a,r as s,o as i,c as o,a as t,b as e,d,e as n}from"./app-a242af93.js";const r={},c=n(`<h1 id="vs调试器中的cpp格式说明" tabindex="-1"><a class="header-anchor" href="#vs调试器中的cpp格式说明" aria-hidden="true">#</a> VS调试器中的CPP格式说明</h1><p>查看UTF-8的值，s8比较有用</p><h2 id="设置格式说明符" tabindex="-1"><a class="header-anchor" href="#设置格式说明符" aria-hidden="true">#</a> 设置格式说明符</h2><p>我们将使用以下示例代码：</p><p>cpp复制</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> my_var1 <span class="token operator">=</span> <span class="token number">0x0065</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> my_var2 <span class="token operator">=</span> <span class="token number">0x0066</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> my_var3 <span class="token operator">=</span> <span class="token number">0x0067</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调试期间，将 <code>my_var1</code> 变量添加到“监视”窗口，“调试”&gt;“窗口”&gt;“监视”&gt;“监视 1”。 接下来，右键单击变量，然后选择“十六进制显示”。 现在，“监视”窗口显示值 0x0065。 若要查看以字符而不是整数形式表达的此值，请先右键单击并取消选择“十六进制显示”。 然后，在“名称”列的变量名称之后添加字符格式说明符“, c”。 现在，“值”列显示“101 &#39;e&#39;”。</p><figure><img src="https://learn.microsoft.com/zh-cn/visualstudio/debugger/media/watchformatcplus1.png?view=vs-2019" alt="Visual Studio“监视”窗口的屏幕截图，其中选中的行显示 my_var1.c，值为 101 &#39;e&#39;，类型为 int。" tabindex="0" loading="lazy"><figcaption>Visual Studio“监视”窗口的屏幕截图，其中选中的行显示 my_var1.c，值为 101 &#39;e&#39;，类型为 int。</figcaption></figure><p>可以通过将逗号 (,) 追加到“监视”窗口中的值来查看可用格式说明符列表并从中进行选择。</p><figure><img src="https://learn.microsoft.com/zh-cn/visualstudio/debugger/media/vs-2019/format-specs-cpp.png?view=vs-2019" alt="WatchFormatSpecDropdown" tabindex="0" loading="lazy"><figcaption>WatchFormatSpecDropdown</figcaption></figure><h2 id="格式说明符" tabindex="-1"><a class="header-anchor" href="#格式说明符" aria-hidden="true">#</a> 格式说明符</h2><p>下表介绍可以在 Visual Studio 中使用的格式说明符。 仅新调试器支持加粗的说明符，但 cpp/CLI 的互操作调试不支持。</p><table><thead><tr><th style="text-align:left;">说明符</th><th style="text-align:left;">格式</th><th style="text-align:left;">原始监视值</th><th style="text-align:left;">显示的值</th></tr></thead><tbody><tr><td style="text-align:left;">d</td><td style="text-align:left;">十进制整数</td><td style="text-align:left;">0x00000066</td><td style="text-align:left;">102</td></tr><tr><td style="text-align:left;">o</td><td style="text-align:left;">无符号的八进制整数</td><td style="text-align:left;">0x00000066</td><td style="text-align:left;">000000000146</td></tr><tr><td style="text-align:left;">x <strong>h</strong></td><td style="text-align:left;">十六进制整数</td><td style="text-align:left;">102</td><td style="text-align:left;">0xcccccccc</td></tr><tr><td style="text-align:left;">X <strong>H</strong></td><td style="text-align:left;">十六进制整数</td><td style="text-align:left;">102</td><td style="text-align:left;">0xcccccccc</td></tr><tr><td style="text-align:left;">xb <strong>hb</strong></td><td style="text-align:left;">十六进制整数（没有前导 0x）</td><td style="text-align:left;">102</td><td style="text-align:left;">cccccccc</td></tr><tr><td style="text-align:left;">Xb <strong>Hb</strong></td><td style="text-align:left;">十六进制整数（没有前导 0x）</td><td style="text-align:left;">102</td><td style="text-align:left;">CCCCCCCC</td></tr><tr><td style="text-align:left;">b</td><td style="text-align:left;">无符号二进制整数</td><td style="text-align:left;">25</td><td style="text-align:left;">0b00000000000000000000000000011001</td></tr><tr><td style="text-align:left;">bb</td><td style="text-align:left;">无符号二进制整数（没有前导 0b）</td><td style="text-align:left;">25</td><td style="text-align:left;">00000000000000000000000000011001</td></tr><tr><td style="text-align:left;">e</td><td style="text-align:left;">科学记数法</td><td style="text-align:left;">25000000</td><td style="text-align:left;">2.500000e+07</td></tr><tr><td style="text-align:left;">g</td><td style="text-align:left;">科学记数或浮点（以较短者为准）</td><td style="text-align:left;">25000000</td><td style="text-align:left;">2.5e+07</td></tr><tr><td style="text-align:left;">c</td><td style="text-align:left;">单个字符</td><td style="text-align:left;">0x0065</td><td style="text-align:left;">101 &#39;e&#39;</td></tr><tr><td style="text-align:left;">s</td><td style="text-align:left;">const char* 字符串（加引号）</td><td style="text-align:left;">&quot;hello world&quot;</td><td style="text-align:left;">&quot;hello world&quot;</td></tr><tr><td style="text-align:left;"><strong>sb</strong></td><td style="text-align:left;">const char * 字符串（无引号）</td><td style="text-align:left;">&quot;hello world&quot;</td><td style="text-align:left;">hello world</td></tr><tr><td style="text-align:left;"><mark>s8</mark></td><td style="text-align:left;">UTF-8 字符串</td><td style="text-align:left;">&quot;This is a UTF-8 coffee cup â˜•&quot;</td><td style="text-align:left;">&quot;This is a UTF-8 coffee cup ☕&quot;</td></tr><tr><td style="text-align:left;"><strong>s8b</strong></td><td style="text-align:left;">UTF-8 字符串（无引号）</td><td style="text-align:left;">&quot;hello world&quot;</td><td style="text-align:left;">hello world</td></tr><tr><td style="text-align:left;">su</td><td style="text-align:left;">Unicode（UTF-16 编码）字符串（加引号）</td><td style="text-align:left;">L&quot;hello world&quot;</td><td style="text-align:left;">L&quot;hello world&quot; u&quot;hello world&quot;</td></tr><tr><td style="text-align:left;">sub</td><td style="text-align:left;">Unicode（UTF-16 编码）字符串（无引号）</td><td style="text-align:left;">L&quot;hello world&quot;</td><td style="text-align:left;">hello world</td></tr><tr><td style="text-align:left;">bstr</td><td style="text-align:left;">BSTR 二进制字符串（加引号）</td><td style="text-align:left;">L&quot;hello world&quot;</td><td style="text-align:left;">L&quot;hello world&quot;</td></tr><tr><td style="text-align:left;">env</td><td style="text-align:left;">环境块（双空终止字符串）</td><td style="text-align:left;">L&quot;=::=::\\&quot;</td><td style="text-align:left;">L&quot;=::=::\\\\0=C:=C:\\windows\\system32\\0ALLUSERSPROFILE=...</td></tr><tr><td style="text-align:left;"><strong>s32</strong></td><td style="text-align:left;">UTF-32 字符串（加引号）</td><td style="text-align:left;">U&quot;hello world&quot;</td><td style="text-align:left;">u&quot;hello world&quot;</td></tr><tr><td style="text-align:left;"><strong>s32b</strong></td><td style="text-align:left;">UTF-32 string (no quotation marks)</td><td style="text-align:left;">U&quot;hello world&quot;</td><td style="text-align:left;">hello world</td></tr><tr><td style="text-align:left;"><strong>en</strong></td><td style="text-align:left;">enum</td><td style="text-align:left;">Saturday(6)</td><td style="text-align:left;">星期六</td></tr></tbody></table><p>备注</p><p>如果存在 hv 格式说明符，调试器会尝试确定缓冲区的长度并显示相应的元素数。 由于调试器并非总是可以查找确切的数组缓冲区大小，只要可能时，就应该使用大小说明符 <code>(pBuffer,[bufferSize])</code> 。 当缓冲区大小尚不可用时，hv 格式说明符很有用。</p><h3 id="指针的大小说明符作为数组" tabindex="-1"><a class="header-anchor" href="#指针的大小说明符作为数组" aria-hidden="true">#</a> 指针的大小说明符作为数组</h3><p>如果有一个指针指向要看做数组形式的对象，则可以使用一个整数或表达式来指定数组中元素的数量。</p><table><thead><tr><th style="text-align:left;">说明符</th><th style="text-align:left;">格式</th><th style="text-align:left;">原始监视值</th><th style="text-align:left;">显示的值</th></tr></thead><tbody><tr><td style="text-align:left;">n</td><td style="text-align:left;">十进制或 <strong>十六进制</strong> 整数</td><td style="text-align:left;">pBuffer,[32] pBuffer，“[0x20]”</td><td style="text-align:left;">将 <code>pBuffer</code> 显示为一个 32 元素的数组。</td></tr><tr><td style="text-align:left;"><strong>[exp]</strong></td><td style="text-align:left;">计算结果为一个整数的有效的 cpp 表达式。</td><td style="text-align:left;">pBuffer,[bufferSize]</td><td style="text-align:left;">将 pBuffer 显示为 <code>bufferSize</code> 元素的一个数组。</td></tr><tr><td style="text-align:left;"><strong>expand(n)</strong></td><td style="text-align:left;">计算结果为一个整数的有效的 cpp 表达式。</td><td style="text-align:left;">pBuffer, expand(2)</td><td style="text-align:left;">显示 <code>pBuffer</code> 的第三个元素</td></tr></tbody></table><h2 id="使用-cpp-cli-的互操作调试的格式说明符" tabindex="-1"><a class="header-anchor" href="#使用-cpp-cli-的互操作调试的格式说明符" aria-hidden="true">#</a> 使用 cpp/CLI 的互操作调试的格式说明符</h2>`,19),g=t("strong",null,"粗体",-1),f={href:"https://learn.microsoft.com/zh-cn/visualstudio/debugger/general-debugging-options-dialog-box?view=vs-2019",target:"_blank",rel:"noopener noreferrer"},p=t("h3",{id:"cpp-cli-互操作调试中的内存位置格式说明符",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#cpp-cli-互操作调试中的内存位置格式说明符","aria-hidden":"true"},"#"),e(" cpp/CLI 互操作调试中的内存位置格式说明符")],-1),x=t("p",null,"下表介绍用于内存位置的格式化符号。 可以使用带有计算为位置的任何值或表达式的内存位置说明符。",-1),u=t("strong",null,"粗体",-1),y={href:"https://learn.microsoft.com/zh-cn/visualstudio/debugger/general-debugging-options-dialog-box?view=vs-2019",target:"_blank",rel:"noopener noreferrer"},h=n('<h3 id="指针的大小说明符-并且指针在使用-cpp-cli-进行的互操作调试中作为数组存在" tabindex="-1"><a class="header-anchor" href="#指针的大小说明符-并且指针在使用-cpp-cli-进行的互操作调试中作为数组存在" aria-hidden="true">#</a> 指针的大小说明符，并且指针在使用 cpp/CLI 进行的互操作调试中作为数组存在</h3><p>如果有一个指针指向要看做数组形式的对象，则可以使用一个整数来指定数组中元素的数量。</p><table><thead><tr><th style="text-align:left;">说明符</th><th style="text-align:left;">格式</th><th style="text-align:left;">表达式</th><th style="text-align:left;">显示的值</th></tr></thead><tbody><tr><td style="text-align:left;">n</td><td style="text-align:left;">十进制整数</td><td style="text-align:left;">pBuffer[32]</td><td style="text-align:left;">将 <code>pBuffer</code> 显示为 32 个元素的数组。</td></tr></tbody></table>',3),b={href:"https://learn.microsoft.com/zh-cn/visualstudio/debugger/format-specifiers-in-cpp?view=vs-2019",target:"_blank",rel:"noopener noreferrer"};function m(_,v){const l=s("ExternalLinkIcon");return i(),o("div",null,[c,t("p",null,[g,e(" 的说明符仅支持本地调试和 cpp/CLI 代码。 这些说明符需要使用"),t("a",f,[e("托管兼容模式"),d(l)]),e("指定的旧版调试器。")]),p,x,t("p",null,[u,e(" 的说明符仅支持本地调试和 cpp/CLI 代码。 这需要使用"),t("a",y,[e("托管兼容模式"),d(l)]),e("指定的旧版调试器。")]),h,t("p",null,[t("a",b,[e("https://learn.microsoft.com/zh-cn/visualstudio/debugger/format-specifiers-in-cpp?view=vs-2019"),d(l)])])])}const k=a(r,[["render",m],["__file","Visual Studio 调试器中的CPP格式说明符.html.vue"]]);export{k as default};
