import{_ as t,r as o,o as l,c,a,b as s,d as r,e}from"./app-a242af93.js";const i={},d=e(`<h1 id="class-与-style-绑定" tabindex="-1"><a class="header-anchor" href="#class-与-style-绑定" aria-hidden="true">#</a> Class 与 Style 绑定</h1><h2 id="绑定-html-class" tabindex="-1"><a class="header-anchor" href="#绑定-html-class" aria-hidden="true">#</a> 绑定 HTML class</h2><h3 id="绑定对象" tabindex="-1"><a class="header-anchor" href="#绑定对象" aria-hidden="true">#</a> 绑定对象</h3><p>我们可以给 <code>:class</code> (<code>v-bind:class</code> 的缩写) 传递一个对象来动态切换 class：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ active: isActive }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),p=a("code",null,"active",-1),u=a("code",null,"isActive",-1),v={href:"https://developer.mozilla.org/en-US/docs/Glossary/Truthy",target:"_blank",rel:"noopener noreferrer"},h=e(`<p>你可以在对象中写多个字段来操作多个 class。此外，<code>:class</code> 指令也可以和一般的 <code>class</code> attribute 共存。举例来说，下面这样的状态：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>const isActive = ref(true)
const hasError = ref(false)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="绑定数组" tabindex="-1"><a class="header-anchor" href="#绑定数组" aria-hidden="true">#</a> 绑定数组</h4><p>我们可以给 <code>:class</code> 绑定一个数组来渲染多个 CSS class：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>const activeClass = ref(&#39;active&#39;)
const errorClass = ref(&#39;text-danger&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>div :class<span class="token operator">=</span><span class="token string">&quot;[activeClass, errorClass]&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>渲染的结果是：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">&quot;active text-danger&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你也想在数组中有条件地渲染某个 class，你可以使用三元表达式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>div :class<span class="token operator">=</span><span class="token string">&quot;[isActive ? activeClass : &#39;&#39;, errorClass]&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>errorClass</code> 会一直存在，但 <code>activeClass</code> 只会在 <code>isActive</code> 为真时才存在。</p><p>然而，这可能在有多个依赖条件的 class 时会有些冗长。因此也可以在数组中嵌套对象：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>div :class<span class="token operator">=</span><span class="token string">&quot;[{ active: isActive }, errorClass]&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13);function g(k,m){const n=o("ExternalLinkIcon");return l(),c("div",null,[d,a("p",null,[s("上面的语法表示 "),p,s(" 是否存在取决于数据属性 "),u,s(" 的"),a("a",v,[s("真假值"),r(n)]),s("。")]),h])}const _=t(i,[["render",g],["__file","Class 与 Style 绑定.html.vue"]]);export{_ as default};
